[{"/Users/maveen/Documents/Notesapp/mynotes/frontend/src/index.js":"1","/Users/maveen/Documents/Notesapp/mynotes/frontend/src/App.js":"2","/Users/maveen/Documents/Notesapp/mynotes/frontend/src/components/Header.js":"3","/Users/maveen/Documents/Notesapp/mynotes/frontend/src/pages/NotesListPage.js":"4","/Users/maveen/Documents/Notesapp/mynotes/frontend/src/pages/NotePage.js":"5","/Users/maveen/Documents/Notesapp/mynotes/frontend/src/components/ListItem.js":"6","/Users/maveen/Documents/Notesapp/mynotes/frontend/src/components/AddButton.js":"7"},{"size":234,"mtime":1672000460571,"results":"8","hashOfConfig":"9"},{"size":542,"mtime":1672066279128,"results":"10","hashOfConfig":"9"},{"size":160,"mtime":1672065690508,"results":"11","hashOfConfig":"9"},{"size":1009,"mtime":1672056479004,"results":"12","hashOfConfig":"9"},{"size":2431,"mtime":1672067667617,"results":"13","hashOfConfig":"9"},{"size":850,"mtime":1672064104222,"results":"14","hashOfConfig":"9"},{"size":340,"mtime":1672056510552,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"60ydi5",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/maveen/Documents/Notesapp/mynotes/frontend/src/index.js",[],[],"/Users/maveen/Documents/Notesapp/mynotes/frontend/src/App.js",[],[],[],"/Users/maveen/Documents/Notesapp/mynotes/frontend/src/components/Header.js",[],[],"/Users/maveen/Documents/Notesapp/mynotes/frontend/src/pages/NotesListPage.js",[],[],"/Users/maveen/Documents/Notesapp/mynotes/frontend/src/pages/NotePage.js",["39"],[],"import React, { useState, useEffect } from 'react'\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg'\n\nconst NotePage = ({ match, history }) => {\n\n    let noteId = match.params.id //This is gonna give us the note id\n\n    let [note, setNote] = useState(null)\n\n    useEffect(() => {\n        getNote()\n\n    }, [noteId])\n\n    let getNote = async () => { // this is gonna call the db\n        if (noteId === 'new') return\n\n        let response = await fetch(`/api/notes/${noteId}/`) // we are getting the note id from url and then making the request\n        let data = await response.json()\n        setNote(data) // updating the state\n    }\n    let createNote = async () => {\n        fetch(`/api/notes/`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(note)\n        })\n\n    }\n\n    let updateNote = async () => {\n        fetch(`/api/notes/${noteId}/`, {\n            method: \"PUT\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(note)\n        })\n\n    }\n\n    let deleteNote = async () => {\n        fetch(`/api/notes/${noteId}/`, {\n            method: \"DELETE\",\n            'headers': {\n                'Content-Type': 'application/json'\n            }\n        })\n\n        history.push('/')\n    }\n\n    let handleSubmit = () => {\n        if (noteId !== 'new' && note.body === '') {\n            deleteNote()\n        } else if (noteId !== 'new') {\n            updateNote()\n        } else if (noteId === 'new' && note.body !== null) {\n            createNote()\n        }\n        history.push('/')\n    }\n\n    let handleChange = (value) => {\n        setNote(note => ({ ...note, 'body': value }))\n\n\n    }\n\n    return (\n        <div className=\"note\">\n            <div className=\"note-header\">\n\n                <h3 onClick={handleSubmit}><ArrowLeft /></h3>\n                {noteId !== 'new' ? (\n                    <button onClick={deleteNote}>Delete</button>\n                ) : (\n                    <button onClick={handleSubmit} >Done</button>\n                )}\n\n\n\n            </div>\n            {/* onChange: as every change we are calling the onChange method and we are updating the state */}\n            <textarea onChange={(e) => { handleChange(e.target.value) }} value={note?.body}></textarea>\n        </div >\n    )\n}\n\nexport default NotePage","/Users/maveen/Documents/Notesapp/mynotes/frontend/src/components/ListItem.js",[],[],"/Users/maveen/Documents/Notesapp/mynotes/frontend/src/components/AddButton.js",[],[],{"ruleId":"40","severity":1,"message":"41","line":13,"column":8,"nodeType":"42","endLine":13,"endColumn":16,"suggestions":"43"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getNote'. Either include it or remove the dependency array.","ArrayExpression",["44"],{"desc":"45","fix":"46"},"Update the dependencies array to be: [getNote, noteId]",{"range":"47","text":"48"},[327,335],"[getNote, noteId]"]